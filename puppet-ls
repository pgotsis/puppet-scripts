#!/bin/bash
# tested on 0.25

usage () {

cat<<EOU
$appname - Copyright (c) 2011 Dean Wilson - Licensed under the GPLv2

$appname lists files that puppet isn't currently managing in the given
directory. Without arguments $appname shows the files in the current
working directory.

The directory to check should always be the last argument.

Usage: $appname [-r] [-R] [-i] [directory]
  -i
    Invert the check and show files that puppet isn't managing.
  -r
    Show all puppet managed files in the given directory and subdirectories
  -R
    Show all puppet managed files in the given directory and subdirectories,
    following symbolic links
  -o
    Puppet may consider files to be managed, purely because they exist in a
    directory which is recursively managed. If the directory has permissions
    set in a puppet manifest and the recurse flag on, but no purging, files
    existing in this directory but not created by puppet will still be
    considered as managed, as puppet may handle their permissions or
    ownership. Using the -o flag, only those files which are actually created
    by puppet are listed.
  -h
    This help and usage information.

Usage: $appname

Examples:
  # show all puppet managed files in the /etc/mcollective directory.
  $appname /etc/mcollective

  # show all unmanaged files in /etc/nagios and any subdirectories
  $appname -r -i /etc/nagios/

EOU
exit 0
}

#################################################################

appname=$(basename "$0")
comm="comm -12"

while getopts "iroRh" option
do
case $option in
    i ) comm="comm -13" ;;
    r ) recursive=1 ;;
    R ) follow_links=1 ;;
    o ) only_created=1 ;;
    h ) usage ;;
    * ) usage
  esac
done

# grab the non-getopts option
shift $(($OPTIND - 1))
target="${1-$(pwd)}"
target="${target%/}"

if [ -n "$follow_links" ];then
  lister="find -L \"\$target\""
elif [ -n "$recursive" ];then
  lister="find \"\$target\""
else
  lister="find \"\$target\" -mindepth 1 -maxdepth 1"
fi

# Tests if puppet enterprise is used.
if [ -d /var/opt/lib/pe-puppet ]; then
  vardir="/var/opt/lib/pe-puppet"
else
  vardir="/var/lib/puppet"
fi

catalog_filelist=$(mktemp -q /tmp/$appname.XXXXXX)
lister_filelist=$(mktemp -q /tmp/$appname.XXXXXX)

# better clean up
trap "rm -f $catalog_filelist $lister_filelist" 0 1 2 15

# get files puppet knows about - you might not need both of these.
(
  grep -h "title: /" $vardir/client_yaml/catalog/*.yaml | awk '{ print $NF }' ;
  if [ -z "$only_created" ];then
    sed -e '/File\[/!d' -e 's/File\[//' -e 's/\]://' -e 's/ //g' < $vardir/state/state.yaml
  fi
) | sort > $catalog_filelist

eval "$lister" | sort > $lister_filelist

$comm $catalog_filelist $lister_filelist
